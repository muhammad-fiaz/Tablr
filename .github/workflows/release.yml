name: Release

on:
  release:
    types: [released]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.variant }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        variant: [cpu, npu, tpu]
        include:
          - os: ubuntu-latest
            variant: cpu
            asset_name: tablr-linux-x64-cpu.tar.gz
            build_flags: ""
          - os: ubuntu-latest
            variant: npu
            asset_name: tablr-linux-x64-npu.tar.gz
            build_flags: "--npu=y"
          - os: ubuntu-latest
            variant: tpu
            asset_name: tablr-linux-x64-tpu.tar.gz
            build_flags: "--tpu=y"
          - os: windows-latest
            variant: cpu
            asset_name: tablr-windows-x64-cpu.zip
            build_flags: ""
          - os: windows-latest
            variant: npu
            asset_name: tablr-windows-x64-npu.zip
            build_flags: "--npu=y"
          - os: windows-latest
            variant: tpu
            asset_name: tablr-windows-x64-tpu.zip
            build_flags: "--tpu=y"
          - os: macos-latest
            variant: cpu
            asset_name: tablr-macos-x64-cpu.tar.gz
            build_flags: ""
          - os: macos-latest
            variant: npu
            asset_name: tablr-macos-x64-npu.tar.gz
            build_flags: "--npu=y"
          - os: macos-latest
            variant: tpu
            asset_name: tablr-macos-x64-tpu.tar.gz
            build_flags: "--tpu=y"

    steps:
      - uses: actions/checkout@v5

      - name: Install xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest

      - name: Build Release
        continue-on-error: false
        run: |
          xmake f -m release ${{ matrix.build_flags }} || xmake f -m release
          xmake build tablr

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release/lib release/include
          cp -r include/* release/include/
          cp xmake.lua CMakeLists.txt conanfile.py vcpkg.json LICENSE README.md release/
          find build -name "libtablr.a" -exec cp {} release/lib/ \;
          tar -czf ${{ matrix.asset_name }} -C release .

      - name: Package (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path release\lib
          New-Item -ItemType Directory -Force -Path release\include
          Copy-Item -Recurse -Force include\* release\include\
          Copy-Item xmake.lua,CMakeLists.txt,conanfile.py,vcpkg.json,LICENSE,README.md release\
          Get-ChildItem -Path build -Recurse -Filter tablr.lib | Copy-Item -Destination release\lib\

      - name: Compress (Windows)
        if: runner.os == 'Windows'
        run: Compress-Archive -Path release\* -DestinationPath ${{ matrix.asset_name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ./${{ matrix.asset_name }}

  publish-packages:
    name: Publish Package Manager Releases
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5

      - name: Update Versions
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          sed -i "s/version: str = \".*\"/version: str = \"${VERSION#v}\"/g" conanfile.py
          sed -i "s/set_version(\".*\")/set_version(\"${VERSION#v}\")/g" xmake.lua
          sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION#v}\"/g" vcpkg.json

      - name: Create Source Package
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          mkdir -p source-package
          cp xmake.lua conanfile.py CMakeLists.txt vcpkg.json LICENSE README.md source-package/
          cp -r include source-package/
          cp -r src source-package/
          
          # Create CMakeLists.txt for examples and tests subdirectories
          mkdir -p source-package/examples source-package/tests
          
          cat > source-package/examples/CMakeLists.txt << 'EOFCMAKE'
          add_executable(example_basic ../examples/basic_usage.c)
          target_link_libraries(example_basic PRIVATE tablr)
          EOFCMAKE
          
          cat > source-package/tests/CMakeLists.txt << 'EOFCMAKE'
          add_executable(tablr_tests ../tests/test_tablr.c)
          target_link_libraries(tablr_tests PRIVATE tablr)
          add_test(NAME tablr_tests COMMAND tablr_tests)
          EOFCMAKE
          
          # xmake package
          tar -czf tablr-xmake-${VERSION}.tar.gz -C source-package .
          
          # Conan package (same files)
          tar -czf tablr-conan-${VERSION}.tar.gz -C source-package .
          
          # vcpkg port
          mkdir -p vcpkg-port/ports/tablr
          cp vcpkg.json vcpkg-port/ports/tablr/
          cat > vcpkg-port/ports/tablr/portfile.cmake << 'EOF'
          vcpkg_from_github(
              OUT_SOURCE_PATH SOURCE_PATH
              REPO muhammad-fiaz/tablr
              REF ${VERSION}
              SHA512 0
              HEAD_REF main
          )
          vcpkg_check_features(OUT_FEATURE_OPTIONS FEATURE_OPTIONS
              FEATURES cuda TABLR_CUDA_SUPPORT xpu TABLR_XPU_SUPPORT npu TABLR_NPU_SUPPORT tpu TABLR_TPU_SUPPORT
          )
          vcpkg_cmake_configure(SOURCE_PATH "${SOURCE_PATH}" OPTIONS ${FEATURE_OPTIONS} -DTABLR_BUILD_TESTS=OFF -DTABLR_BUILD_EXAMPLES=OFF)
          vcpkg_cmake_install()
          vcpkg_cmake_config_fixup()
          vcpkg_copy_pdbs()
          file(REMOVE_RECURSE "${CURRENT_PACKAGES_DIR}/debug/include")
          file(INSTALL "${SOURCE_PATH}/LICENSE" DESTINATION "${CURRENT_PACKAGES_DIR}/share/${PORT}" RENAME copyright)
          EOF
          sed -i "s/\${VERSION}/${VERSION}/g" vcpkg-port/ports/tablr/portfile.cmake
          tar -czf tablr-vcpkg-${VERSION}.tar.gz -C vcpkg-port .

      - name: Upload All Packages
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            tablr-xmake-${{ github.event.release.tag_name }}.tar.gz
            tablr-conan-${{ github.event.release.tag_name }}.tar.gz
            tablr-vcpkg-${{ github.event.release.tag_name }}.tar.gz

  update-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [build, publish-packages]
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5

      - name: Generate Release Notes
        id: notes
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          REPO="${{ github.repository }}"

          cat > release_notes.md << EOF
          ## 📦 Installation

          ### Binary Releases

          | File | Platform | Devices | Download |
          |------|----------|---------|----------|
          | \`tablr-linux-x64-cpu.tar.gz\` | Linux x64 | CPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-linux-x64-cpu.tar.gz) |
          | \`tablr-linux-x64-npu.tar.gz\` | Linux x64 | CPU + NPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-linux-x64-npu.tar.gz) |
          | \`tablr-linux-x64-tpu.tar.gz\` | Linux x64 | CPU + TPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-linux-x64-tpu.tar.gz) |
          | \`tablr-windows-x64-cpu.zip\` | Windows x64 | CPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-windows-x64-cpu.zip) |
          | \`tablr-windows-x64-npu.zip\` | Windows x64 | CPU + NPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-windows-x64-npu.zip) |
          | \`tablr-windows-x64-tpu.zip\` | Windows x64 | CPU + TPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-windows-x64-tpu.zip) |
          | \`tablr-macos-x64-cpu.tar.gz\` | macOS x64 | CPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-macos-x64-cpu.tar.gz) |
          | \`tablr-macos-x64-npu.tar.gz\` | macOS x64 | CPU + NPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-macos-x64-npu.tar.gz) |
          | \`tablr-macos-x64-tpu.tar.gz\` | macOS x64 | CPU + TPU | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-macos-x64-tpu.tar.gz) |

          ### Package Managers

          | Package | Build System | Devices | Download |
          |---------|--------------|---------|----------|
          | \`tablr-xmake-${VERSION}.tar.gz\` | xmake | Configurable | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-xmake-${VERSION}.tar.gz) |
          | \`tablr-conan-${VERSION}.tar.gz\` | Conan | Configurable | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-conan-${VERSION}.tar.gz) |
          | \`tablr-vcpkg-${VERSION}.tar.gz\` | vcpkg | Configurable | [Download](https://github.com/${REPO}/releases/download/${VERSION}/tablr-vcpkg-${VERSION}.tar.gz) |

          **Note:** All packages include static libraries (.a/.lib), headers, and xmake.lua for easy integration.

          ## 🚀 Quick Install

          ### Binary Installation

          **Linux/macOS (CPU):**
          \`\`\`bash
          wget https://github.com/${REPO}/releases/download/${VERSION}/tablr-linux-x64-cpu.tar.gz
          tar -xzf tablr-linux-x64-cpu.tar.gz
          sudo cp -r lib/* /usr/local/lib/
          sudo cp -r include/* /usr/local/include/
          \`\`\`

          **Windows:** Download \`tablr-windows-x64-cpu.zip\` and extract to your project.

          ### xmake
          \`\`\`bash
          # Download and install
          wget https://github.com/${REPO}/releases/download/${VERSION}/tablr-xmake-${VERSION}.tar.gz
          tar -xzf tablr-xmake-${VERSION}.tar.gz
          cd tablr-xmake-${VERSION}
          
          # Build with device support
          xmake f --cuda=y --npu=y --tpu=y
          xmake install
          \`\`\`

          Or add to your xmake.lua:
          \`\`\`lua
          add_requires("tablr ${VERSION#v}")
          target("your_app")
              add_packages("tablr")
          \`\`\`

          ### Conan
          \`\`\`bash
          # Download package
          wget https://github.com/${REPO}/releases/download/${VERSION}/tablr-conan-${VERSION}.tar.gz
          tar -xzf tablr-conan-${VERSION}.tar.gz
          
          # Install with options
          conan create . --version=${VERSION#v}
          
          # Or use in conanfile.txt
          # [requires]
          # tablr/${VERSION#v}
          # [options]
          # tablr/*:cuda=True
          # tablr/*:npu=True
          \`\`\`

          ### vcpkg
          \`\`\`bash
          # Download port
          wget https://github.com/${REPO}/releases/download/${VERSION}/tablr-vcpkg-${VERSION}.tar.gz
          tar -xzf tablr-vcpkg-${VERSION}.tar.gz
          
          # Copy to vcpkg
          cp -r ports/tablr \$VCPKG_ROOT/ports/
          
          # Install with features
          vcpkg install tablr[cuda,npu,tpu]
          \`\`\`

          ## 🖥️ Device Support
          
          **Available Builds:**
          - **CPU**: Always available (default) - ✅ Built on GitHub Actions
          - **CUDA**: NVIDIA GPUs - ⚠️ Code complete, requires local build with GPU
          - **XPU**: Intel GPUs - ⚠️ Code complete, requires local build with Intel oneAPI
          - **NPU**: Neural accelerators - ✅ Software implementation, built on GitHub Actions
          - **TPU**: Tensor accelerators - ✅ Software implementation, built on GitHub Actions
          
          **Note:** Pre-built binaries include CPU, NPU (software), and TPU (software) support.
          
          **For GPU support (CUDA/XPU), build from source:**
          \`\`\`bash
          # Download source
          wget https://github.com/${REPO}/releases/download/${VERSION}/tablr-xmake-${VERSION}.tar.gz
          tar -xzf tablr-xmake-${VERSION}.tar.gz && cd tablr-xmake-${VERSION}
          
          # CUDA (requires NVIDIA GPU + CUDA Toolkit)
          xmake f --cuda=y && xmake build
          
          # Intel XPU (requires Intel GPU + oneAPI)
          xmake f --xpu=y && xmake build
          \`\`\`
          
          ## 📚 Documentation
          Visit https://muhammad-fiaz.github.io/Tablr for full documentation.

          ## 🔧 Troubleshooting
          
          If you encounter any issues with pre-built binaries, you can always build from source:
          
          **xmake (Recommended):**
          \`\`\`bash
          # Linux/macOS
          git clone https://github.com/${REPO}.git && cd tablr && git checkout ${VERSION}
          xmake build && xmake install                                    # CPU only
          xmake f --cuda=y && xmake build && xmake install               # CUDA
          xmake f --xpu=y && xmake build && xmake install                # XPU
          xmake f --npu=y && xmake build && xmake install                # NPU
          xmake f --tpu=y && xmake build && xmake install                # TPU
          xmake f --cuda=y --npu=y --tpu=y && xmake build && xmake install  # Multiple
          \`\`\`
          
          \`\`\`powershell
          # Windows PowerShell
          git clone https://github.com/${REPO}.git; cd tablr; git checkout ${VERSION}
          xmake build; xmake install                                      # CPU only
          xmake f --cuda=y; xmake build; xmake install                    # CUDA
          xmake f --npu=y; xmake build; xmake install                     # NPU
          xmake f --tpu=y; xmake build; xmake install                     # TPU
          xmake f --npu=y --tpu=y; xmake build; xmake install             # Multiple
          \`\`\`
          
          **CMake:**
          \`\`\`bash
          git clone https://github.com/${REPO}.git && cd tablr && git checkout ${VERSION}
          mkdir build && cd build
          
          # CPU only
          cmake .. && cmake --build . && sudo cmake --install .
          
          # With CUDA
          cmake -DTABLR_CUDA_SUPPORT=ON .. && cmake --build . && sudo cmake --install .
          
          # With multiple devices
          cmake -DTABLR_CUDA_SUPPORT=ON -DTABLR_NPU_SUPPORT=ON -DTABLR_TPU_SUPPORT=ON .. && cmake --build . && sudo cmake --install .
          \`\`\`
          
          For issues or questions, please [open an issue](https://github.com/${REPO}/issues).

          **Full Changelog:** https://github.com/${REPO}/commits/${VERSION}
          EOF

      - name: Update Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          body_path: release_notes.md
